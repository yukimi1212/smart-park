<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zucc.smart.mapper.ParkingMapper">

	<resultMap id="ParkingMap" type="com.zucc.smart.domain.Parking">
		<result column="parkcode" property="parkcode" />
		<result column="streetcode" property="streetcode" />
		<result column="businesscode" property="businesscode" />
		<result column="parkname" property="parkname" />
		<result column="streetname" property="streetname" />
		<result column="areaname" property="areaname" />
		<result column="typecode" property="typecode" />	
		<result column="parking_amount" property="parking_amount" />
		<result column="parking_rest" property="parking_rest" />
	</resultMap>

	<select id="getBusinesscode" resultMap="ParkingMap" useCache="false">
    	select distinct BUSINESSCODE
    	FROM parking
    	group by BUSINESSCODE
    </select>
    
	<select id="getAllParking" parameterType="java.lang.String" resultMap="ParkingMap" useCache="false">
		SELECT *
		FROM parking
	</select>
	
	<select id="getTypeCount" resultType="java.util.HashMap" useCache="false"> 
		select typecode, count(typecode) 
		from parking 
		group by typecode
	</select>
	
	<select id="getOneTypeCount" parameterType="java.lang.String" resultType="java.lang.String" useCache="false"> 
		select count(parkcode) 
		from parking 
		where typecode = #{typecode}
	</select>
	
	<select id="getAreaCount" resultType="java.util.HashMap" useCache="false"> 
		select BUSINESSCODE, count(BUSINESSCODE) 
		from parking 
		group by BUSINESSCODE
	</select>
	
	<select id="getOneAreaCount" parameterType="java.lang.String" resultType="java.lang.String" useCache="false"> 
		select count(parkcode) 
		from parking 
		where BUSINESSCODE = #{BUSINESSCODE}
	</select>
	
	<select id="getStreetCount" resultType="java.util.HashMap" useCache="false"> 
		select streetcode, count(streetcode) 
		from parking 
		group by streetcode
	</select>
	
	<select id="getOneStreetCount" parameterType="java.lang.String" resultType="java.lang.String" useCache="false"> 
		select count(parkcode) 
		from parking 
		where streetcode = #{streetcode}
	</select>
	
	<select id="getAreaName" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		select distinct areaname 
		from parking 
		where BUSINESSCODE = #{BUSINESSCODE}
	</select>
	
	<select id="getStreetName" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		select distinct streetname 
		from parking 
		where streetcode = #{streetcode}
	</select>
	
	<select id="getAreaNameByStreetcode" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		select distinct areaname 
		from parking 
		where streetcode = #{streetcode}
	</select>
	
	<select id="parkingSearch" parameterType="java.lang.String" resultMap="ParkingMap" useCache="false">
		select * 
		from parking 
		where parkcode like #{searchWord} or streetcode like #{searchWord} or businesscode like #{searchWord} or parkname like #{searchWord} or streetname like #{searchWord} or areaname like #{searchWord} or typecode like #{searchWord};
	</select>
	
	<select id="searchStreet" parameterType="java.lang.String" resultType="java.util.HashMap" useCache="false">
		select distinct streetcode,streetname
		from parking 
		where streetcode like #{searchWord} or streetname like #{searchWord} or areaname like #{searchWord}
	</select>
	
	<select id="searchArea" parameterType="java.lang.String" resultType="java.util.HashMap" useCache="false">
		select distinct BUSINESSCODE,areaname
		from parking 
		where BUSINESSCODE like #{searchWord} or areaname like #{searchWord}
	</select>
	
<!-- 	<insert id="saveUser" parameterType="com.zucc.smart.domain.User">
		INSERT INTO user
		(user_id, user_name, user_pwd, user_gender, user_age, user_phone, registration_time, user_identity)
		values
		(#{user_id}, #{user_name}, #{user_pwd}, #{user_gender}, #{user_age}, #{user_phone}, now(), #{user_identity})
	</insert>
    
    <delete id="deleteUser" parameterType="java.lang.String">
		DELETE
		FROM user
		where user_id = #{user_id}
	</delete> -->
</mapper>